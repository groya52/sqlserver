Активная безопасность относится к практике ограничения доступа пользователей к данным с помощью разрешений.

    Модель безопасности SQL Server, сотоит из трех объектов:
        - Принципалы (principals).
            Объекты, которым можно предоставлять разрешения.
        - Защищаемые (securables).
            Все, на что можно назначить разрешения.
        - Разрешения (permissions).
            Права, которые предоставляют или запрещают принципалам доступ к защещаемым обектам.
        
    Принципы безопасности организованы в иерархию, которая позволяет администраторам назначать разрешения для группы пользователей (см. рис. Иерархия безопасности.jpg).
    
    Безопасность уровня экземпляра.
        Реализация защиты уровня экземпляра включает создание и управление входами,
        учетными данными и ролями сервера.
        
        В качестве обеспечения безопасности на уровне экземпляра используются:
            - Базы данных.
            - Конечные точки.
            - Группы доступности AlwaysOn.
            - Криптографические провайдеры.
            - Аудит SQL Server.
        
        SQL Server поддерживает два режима аутентификации на уровне экземпляра: 
            - Аутентификация Windows.
                Пользователи должны пройти аутентификацию либо на локальном сервере, либо в домене, прежде чем смогут получить доступ к экземпляру SQL Server.
                
                В экземпляре SQL Server создается логин, который сопоставляется либо с пользователем Windows, либо с группой Windows, в которой содержится пользователь Windows. 
                
                В дополнение к созданию логина, сопоставленного с пользователем или группой Windows, вы также можете сопоставить логин с сертификатом или асимметричным ключом.
                Это не позволяет пользователю выполнить аутентификацию экземпляра с помощью сертификата, но это позволяет подписать код, чтобы разрешения на процедуры могли быть абстрагированы, а не предоставлены непосредственно для входа в систему. 
                Это помогает, когда вы используете динамический SQL, что нарушает цепочку владения. В этом случае при выполнении этой процедуры SQL Server объединяет разрешения пользователя, который вызвал эту процедуру, и пользователя, который сопоставляется с сертификатом.
                
                Идентификатор SID (идентификатор безопасности) принципала Windows хранится в основной базе данных экземпляра.                       
            - Аутентификация в смешанном режиме.
                Можно создавать логины второго уровня, известные как логины SQL. Эти логины имеют имя, пароль и SID, хранящиеся в основной базе данных экземпляра. Эти данные проверяются, когда пользователь подключается к экземпляру. 
                Затем пользователь может выполнить аутентификацию экземпляра с использованием этого имени пользователя и пароля без необходимости предварительной аутентификации на сервере или домене.
                
        Проверка подлинности в смешанном режиме менее безопасна, чем аутентификация, поскольку можно атаковать экземпляр без предварительной аутентификации в домене. Поэтому рекомендуется использовать проверку подлинности Windows.
        
        Однако часто необходимо использовать аутентификацию в смешанном режиме по следующим причинам:
            - Устаревшие приложения, требующие входа второго уровня.
            - Доступ извне домена (например, сервер Linux).
            - Среды, в которых безопасность реализована на уровне приложения, и один логин SQL подключается к механизму базы данных.
            
        Вход в систему можно создать через T-SQL с помощью инструкции CREATE LOGIN (см. CREATE LOGIN.sql).
        
        Роли сервера.
            SQL Server предоставляет набор встроенных ролей сервера. Эти роли позволяют назначать разрешения на уровне экземпляра для логинов, которые имеют общие требования.
            
            sysadmin
                Дает административные разрешения для всего экземпляра.
            bulkadmin
                В сочетании с разрешением INSERT на целевой таблице в базе данных, роль bulkadmin позволяет пользователю импортировать данные из файла с помощью инструкции BULK INSERT.
                Эта роль обычно предоставляется учетным записям служб, которые запускают процессы ETL.
            dbcreator
                DBCreator роль позволяет его участникам создавать новые базы данных в экземпляре.
                Когда логин создает базу данных, этот логин автоматически является владельцем этой базы данных и способен выполнять любые действия внутри нее.
            diskadmin
                Дает права доступа для управления устройствами резервного копирования в SQL Server.
            processadmin
                Члены данной роли могут остановить экземпляр из T-SQL или SSMS. Они также могут убивать запущенные процессы.
            public
                Все логины добавляются к публичной роли. Хотя вы можете назначать разрешения публичной роли, это не соответствует принципу наименьших привилегий. 
                Эта роль обычно используется только для внутренних операций SQL Server, таких как проверка подлинности на TempDB.            
            securityadmin
                Члены данной роли могут управлять входами на уровне экземпляра. 
                Например, члены могут добавлять логин к роли сервера (кроме sysadmin) или назначать разрешения ресурсу уровня экземпляра, например конечной точке. Однако они не могут назначать разрешения в базе данных пользователям базы данных.
            serveradmin
                Сочетает в себе diskadmin и processadmin роли. 
                Однако, помимо запуска или остановки экземпляра, члены этой роли также могут останавливать экземпляр, используя инструкцию SHUTDOWN T-SQL (дает вам возможность не запускать CHECKPOINT в каждой базе данных, если вы используете ее с опцией NOWAIT).
                Кроме того, члены этой роли могут изменять конечные точки и просматривать все метаданные экземпляра.            
            setupadmin
                Члены данной роли могут создавать и управлять связанными серверами.
                
            Вы также можете создавать пользовательские роли сервера, которые позволяют предоставить настраиваемый набор разрешений для группы логинов (см. CREATE SERVER ROLE.sql). 
            
            Если вы внедрили группы доступности AlwaysOn, вы можете создать роль сервера под названием AvailabilityRole и предоставить этой группе следующие разрешения:
                - Отменить любую группу доступности.
                - Изменить любую конечную точку.
                - Создать группу доступности.
                - Создать конечную точку.

            Затем вы можете добавить к этой роли младших администраторов баз данных, которые не уполномочены быть членами фиксированной роли сервера sysadmin, но которым необходимо управлять высокой доступностью и аварийным восстановлением экземпляра.            
            
        При назначении разрешений для роли сервера или входа в систему можно выполнить три следующих назначения:
            GRANT
                Предоставляет разрешения на защищаемый объект принципалу.
            DENY
                Запрещает разрешение для принципала. DENY всегда перекрывает GRANT.
            REVOKE
                Удаляет разрешение, выданное или запрещенное ранее.
                
        Полномочия (Credentials).
            Полномочия используются для предоставления возможности доступа к ресурсам, которые являются внешними по отношению к экземпляру SQL Server. 
            
            Создает полномочия на уровне сервера можно с помощью команды CREATE CREDENTIAL.
            
    Безопасность на уровне базы данных.
        На уровне базы данных безопасность реализуется путем назначения разрешений принципалам безопасности, а именно пользователям и ролям базы данных.
        
        Пользователи.
            Пользователь базы данных обычно создается из входа на уровне экземпляра. 
            
            Пользователи могут быть созданы с помощью инструкции CREATE USER.
            
            Пользователи с логином (см. CREATE USER FOR LOGIN.sql).
                Создание пользователя с тем же именем, что и имя входа, является не обязательным, но разумным, 
                поскольку помогает администрированию безопасности и делает иерархию принципов прозрачными для присоединения новых администраторов баз данных к вашей команде.
                
                Указание схемы пользователя, означает, что пользователь может ссылаться на объекты в данной схеме, используя одночастные имена.
                Если для пользователя не указана схема по умолчанию, то их схема по умолчанию dbo.
                
            Пользователи без логина.                           
                При создании пользователя, не связанного с логином, пользователь может быть сопоставлен с пользователем Windows или создан с использованием проверки подлинности SQL Server.
                
                Пользователи могут создаваться только с помощью проверки подлинности SQL Server, если база данных настроена с частичным (partial) уровнем защиты.
                
                Cоздание пользователей с помощью проверки подлинности SQL Server, возможно только в автономных базах данных (contained databases). 
                
                Некоторые приложения могут потребовать, чтобы у пользователя были разрешения для нескольких баз данных.
                Если пользователь базы данных использует проверку подлинности SQL Server, вам необходимо дублировать SID пользователя, для этого вам необходимо придерживаться следующих шагов:
                    1. Создайте пользователя с паролем в первой базе данных.
                    2. Извлеките SID пользователя из sys.database_principals.
                    3. Создайте пользователя в дополнительных базах данных, в частности, поставьте SID, который вы восстановили из метаданных.
                    
            Роли базы данных.
                db_accessadmin
                    Члены этой роли могут добавлять и удалять пользователей.                
                db_backupoperator
                    Роль дает пользователям разрешения, которые необходимы для создания резервной копии базы данных.
                db_datareader                
                    Члены данной роли могут запускать инструкции SELECT для любой таблицы в базе данных.
                    Это можно переопределить для конкретных таблиц, явно запретив пользователю, разрешения на чтение этих таблиц (DENY всегда переопределяет GRANT).                
                db_datawriter
                    Члены данной роли могут выполнять инструкции DML для любой таблицы в базе данных. 
                    Это можно переопределить для определенных таблиц, специально запретив пользователю разрешения на запись в таблицу (DENY всегда переопределяет GRANT).                
                db_denydatareader
                    Данная роль отрицает SELECT разрешения в каждой таблице базы данных.
                db_denydatawriter                
                    Данная роль отрицает DML разрешения в каждой таблице базы данных.                
                db_ddladmin                
                    Участникам этой роли предоставляется возможность запускать команды CREATE, ALTER и DROP для любого объекта в базе данных. 
                    Я видел пару приложений, которые создают объекты базы данных «на лету». Если вы несете ответственность за администрирование такого приложения, то роль ddl_admin может быть полезна.
                db_owner                
                    Члены данной роли могут выполнять любые действия в базе данных, которые специально не запрещены.                
                db_securityadmin                
                    Члены этой роли могут использовать GRANT, DENY и REVOKE для выдачи прав пользователям на защищенные объекты. 
                    Они также могут изменять членство в ролях, за исключением роли db_owner.
                
                Помимо фиксированных ролей, также можно создавать собственные пользовательские роли базы данных.
                
Схемы (Schemes).
    Каждый объект в базе данных должен принадлежать пользователю базы данных.
    
    Схемы обеспечивают логическое пространство имен для объектов базы данных. 
    
    Они также обеспечивают слой абстракции между объектами и их владельцами. Эта абстракция упрощает изменение прав собственности на объекты базы данных. 
    Чтобы изменить владельца десяти таблиц, вам нужно изменить право собственности на один схему, а не изменять права собственности на все десять таблиц.
    
    Схемы также могут помочь упростить управление разрешениями, 
    потому что вы можете предоставить разрешения для схемы, а не для отдельных объектов в этой схеме.
    
Цепочки владения (Ownership Chaining).
    Когда несколько объектов последовательно вызывают запрос, SQL Server рассматривает их как цепочку. 
    Когда вы объединяете объекты вместе, разрешения оцениваются по-разному, в зависимости от принципала, которому принадлежит схема(ы), в которой находятся объекты.
    
    Важно отметить, что цепи собственности приводят к тому, что назначения DENY обходят стороной. 
    Это связано с тем, что ни оценки GRANT, ни DENY пользователя не оцениваются.
    
Олицетворение (Impersonation).
    Олицетворение относится к практике выполнения операторов T-SQL или модулей кода в контексте другого принципала безопасности. 
    Это помогает вам задействовать принципала наименьших привилегий, назначая меньшее количество разрешений для пользователей, но повышая эти разрешения в момент, когда выполняется раздел кодаю.
    
    В SQL Server олицетворение может быть реализовано с помощью предложения EXECUTE AS.
    
    Контекст EXECUTE AS:
        Session
            LOGIN
            USER
        Procedures, functions and DML triggers
            CALLER
            SELF
            OWNER
            USER
        Database-level DDL triggers
            CALLER
            SELF
            USER
        Server-level DDL triggers
            CALLER
            SELF
            LOGIN
        Queues
            CALLER
            SELF
            USER
            
        CALLER
            Код выполняется в исходном контексте. 
            Это поведение по умолчанию для всех модулей, за исключением очередей.
        SELF
            Код выполняется в контексте принципала, который создал или изменил данный модуль.
        OWNER
            Код выполняется в контексте принципала, который владеет модулем или схемой, в которой находится модуль.
        USER
            Код выполняется в контексте конкретного пользователя базы данных.
        LOGIN
            Код запускается в контексте конкретного входа.
            
    Пользователь, который создает модуль кода, который содержит предложение EXECUTE AS или пользователь, 
    выполняющий специальный SQL в сеансе с использованием предложения EXECUTE AS,
    должен иметь разрешение IMPERSONATE в контексте безопасности, в котором работает код.