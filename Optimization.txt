1. Parsing
    Разбор текста запроса, проверка синтаксиса и построение дерева логических операторов. 
    Это дерево состоит из различных логических реляционных алгебраических операторов, таких как внутренние и внешние объединения, агрегации и другие.

2. Binding
    Cвязывания, производится разрешение имен, проверка на существование таблиц, колонок и других объектов и сопоставление каждого объекта дерева с реальным объектом системного каталога.
    Загружаются метаданные, связанные с таблицами и столбцами (CHECK, NOT NULL и т.д.).

3. Optimization
    3.1 Simplification
        Упрощение дерева запроса:
            — разворачивание подзапросов в соединения (тех, что возможно);
            — удаление излишних соединений;
            — фильтры из where «пропихиваются» вниз по дереву, чтобы обеспечить раннее фильтрование;
            — выявляются и исключаются противоречия.

        Оптимизатор не склонен выполнять операцию развертывания для подзапросов с TOP.
            
        На выходе из этой стадии получается упрощенное дерево логических операторов.

        
    Далее, на каждом этапе, оптимизация может быть завершена, если найден достаточно хороший план, удовлетворяющий внутренним порогам оптимизатора.
    Каждый этап имеет свои условия входа и завершения. 
    
    3.2 Trivial Plan Optimization
        Если запрос может быть решен единственным или очевидно единственно лучшим способом, то значит, запрос удовлетворяет условию тривиального плана. 
        На данном этапе не используются решения на основе статистик, стоимости и т.д. Используется только информация о схеме БД.
        
    3.3 Full Optimization
        3.3.1 Search 0 (Transaction Processing)
            На этом этапе, оптимизатор, на основе эвристик, генерирует начальные наборы возможных вариантов соединения, начиная с соединения наиболее мелких (или хорошо отфильтрованных на ранней стадии) таблиц. 
            Если после этой стадии достаточно хороший план не найден, то управление переходит к следующей стадии. 
            
        3.3.2 Search 1 (Quick Plan)
            На данном этапе используются дополнительные правила преобразования и некоторые возможные перестановки вариантов соединения. 
            Если после генерации плана на этой стадии, план все еще не достаточно хорош, то данная стадия повторяется с целью поиска параллельного плана. 
            После чего два плана сравниваются, и для оценки выбирается лучший из них. Если этот лучший план все еще не проходит внутренние пороги оптимизатора, то управление переходит к следующей стадии.

        3.3.3 Search 2 (Full Optimization)
            Последняя стадия, значит, план должен быть получен в любом случае, даже если он кажется оптимизатору все еще недостаточно хорошим. 
            Эта стадия используется для сложных и очень сложных запросов.

4. Execution

Цель оптимизации запросов состоит в том, чтобы найти достаточно хороший план выполнения, достаточно быстро.


Trivial Plan Optimization
    Для построения плана (упрощение, поиск вариантов соединения, поиск физических операторов) оптимизатор использует правила преобразования (основаны на реляционной алгебре). 
    У каждого правила есть шаблон (выражение, по которому ищется, к какой части дерева может быть применено правило) и заменитель (выражение эквивалент, на которое может быть заменено исходное). 
    
    Правила, можно условно разделить на три группы:
        1. Упрощающие (Simplification Rules) — производят более простые логические деревья, чаще всего используются на этапе упрощения, перед полной оптимизацией.
        2. Исследующие (Exploration Rules) — преобразования логики, генерируют логически эквивалентные альтернативы (пример: коммутативный join - A join B -> B join A).
        3. Реализующие (Implementation Rules) — правила преобразования физических операций, используются для поиска альтернативных физических операций (пример: выбор типа соединения - Hash Join или Merge Join).
    
    Команда DBCC SHOWONRULES отображает список включенных правил преоброзований.
    Команда DBCC SHOWOFFRULES отображает список включенных правил преоброзований.
    
    Команда DBCC RULEOFF('Rule name') отключает правило.
    Команда DBCC RULEON('Rule name') включает правило.
    
    Статистику о применении правил можно посмотреть в sys.dm_exec_query_transformation_stats.
    
    T2373 - выводит информацию о состоянии памяти после каждого возможного преобразования.
    
    T8757 - пропустить поиск тривиального плана.
    
    Статистика на стадии тривиального плана используется, но на ее основе не применяются решения по преобразованию операторов на основе стоимости.
    
    T9292, T9204 - показывают, используется ли запросом статистика и какая.
    
    
    
    
T3604 Перенаправляет вывод команд на консоль.

T8675 Статистика оптимизации.
T8606 Показывает, как преобразовывается дерево логических операторов.

sys.dm_exec_query_optimizer_info