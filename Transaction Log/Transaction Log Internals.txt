Журнал транзакций гарантирует согласованность данных в базе данных. 
Он состоит из потока записей журнала, генерируемых операциями модификации данных.

Каждая запись журнала имеет уникальный, автоматически возрастающий порядковый номер журнала (LSN), 
а также описывает изменение данных.

Некоторые внутренние операции, такие как CHECKPOINT, генерируют собственные записи журнала.

Операция CHECKPOINT также записывает записи журнала из текущих транзакций на диск, 
поскольку записи в кэшированном журнале также считаются грязными.

На каждой странице данных сохраняется LSN последней записи журнала, которая ее модифицировала.

На этапе восстановления SQL Server может сравнивать LSN записей журнала и страниц данных и выяснить, 
были ли сохранены последние изменения в файлах данных.
В записи журнала достаточно информации, чтобы отменить или повторить операцию, если это необходимо.

SQL Server использует ЗАПИСЬ С ПРЕДВАРИТЕЛЬНЫМ ЖУРНАЛИРОВАНИЕМ (write-ahead logging), 
которая гарантирует, что записи журнала записываются в файл журнала, 
прежде чем грязные страницы данных будут сохранены в базе данных.

Записи журнала сохраняются синхронно с изменениями данных, 
а страницы данных сохраняются асинхронно во время процесса CHECKPOINT.

SQL Server кэширует записи журнала в небольшом кеше памяти, называемом буфером журнала, 
одновременно сохраняя несколько журнальных записей. 
Это помогает сократить количество физических операций ввода-вывода.

Буфер журнала состоит из 128 структур по 60 КБ, называемых блоками журналов. 
SQL Server записывает блок журнала в файл журнала транзакций в одной операции ввода-вывода.

Размер данных в запросе на запись может варьироваться от 512 байт до 60 КБ. 
Более того, SQL Server может иметь несколько невыполненных запросов на запись журнала в очередь. 
Максимальное количество разрешенных запросов зависит от версии SQL Server.

Чтобы быть точным, COMMIT операция отмечает часть буфера журнала, 
который включает в себя COMMIT и все предыдущие записи журнала, как "Ready to Flush". 
Другой процесс SQL Server (Log Writer), 
непрерывно сканируют буфер журнала и скидывет область "Ready to Flush" в журнал транзакций.

Записи журнала в журнале транзакций имеют достаточно информации, чтобы отменить изменения, если это необходимо. 
В этом случае SQL Server выполняет операции компенсации, 
которые выполняют противоположные действия с исходными изменениями данных и генерируют записи журнала компенсации.

Запись с предварительным журналированием (Write-ahead logging) гарантирует, 
что грязные страницы данных никогда не сохраняются в файлах данных до тех пор, 
пока соответствующие записи журнала не будут записаны в журнал транзакций.

Процесс CHECKPOINT является асинхронным, и есть задержка между моментом, 
когда запись журнала записана в журнал и когда страницы в файлах данных обновляются.
Более того, CHECKPOINT не анализирует, действительно ли были совершены транзакции, 
на которых были модифицированы страницы данных. 
Поэтому некоторые страницы в файлах данных отражают изменения от незавершенных транзакций.

Процесс восстановления состоит из трех этапов (см. Database recovery.jpg):    
    1. На этапе Analysis SQL Server обнаруживает последнюю операцию CHECKPOINT в файле журнала, 
       которая является последним, когда грязные страницы были сохранены в файле данных.
       
       SQL Server создает список страниц, которые были изменены после CHECKPOINT, 
       а также список транзакций, которые были не зафиксированны в момент остановки SQL Server.
       
       Создается таблица грязных страниц (DPT), состоящая из страниц, которые были грязными в момент остановки SQL Server.
       Также создается активная таблица транзакций, состоящая из незафиксированных транзакций в момент остановки SQL Server.       
    2. Во время фазы Redo SQL Server анализирует журнал транзакций от исходного LSN до самой старой активной транзакции в момент сбоя, который хранится на странице загрузки базы данных и применяет изменения к данным. 
       Несмотря на то, что некоторые изменения уже могут быть сохранены в файлах данных, SQL Server получает блокировки на модифицированных строках, аналогичные регулярной рабочей нагрузке.
       В конце этапа повторной обработки база данных находится в состоянии, когда она была в то время, когда SQL Server неожиданно отключился.
    3. Наконец, во время фазы Undo SQL Server откатывает все активные, незафиксированные транзакции.
    
Процесс восстановления использует один поток для каждой базы данных.

Enterprise Edition SQL Server поддерживает быстрое восстановление, 
что делает базу данных доступной для пользователей после этапа Redo.
 
Типы востановления:
    - Восстановление при перезагрузке.
    - По запросу при выполнении операции восстановления.
 
Оба типа восстановления должны иметь дело с двумя ситуациями: 
    - Когда транзакции записываются как зафиксированные в журнале, но еще не записаны в файлы данных.
    - Когда изменения в файлах данных не соответствуют совершенным транзакциям.

SQL Server использует несколько потоков для одновременной обработки операций восстановления в разных базах данных, 
поэтому базам данных с более высокими идентификационными номерами не нужно ждать, 
пока все базы данных с более низкими идентификационными номерами будут полностью восстановлены до того, 
как начнется их процесс восстановления.