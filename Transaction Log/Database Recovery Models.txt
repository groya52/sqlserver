Модели восстановления базы данных SIMPLE, FULL и BULK LOGGED. 

Хотя SQL Server регистрирует достаточную информацию для отката транзакций и/или выполнения восстановления при сбое независимо от модели восстановления, 
такие модели контролируют, когда журнал усечен и когда VLF становятся неактивными.

Вы не можете получить доступ и выполнить повторные действия из неактивной части журнала, 
и поэтому усечение влияет на количество потенциальной потери работы, если файлы данных недоступны.

Усечение журнала транзакций не уменьшает размер файла журнала, 
а скорее отмечает VLF как неактивное и готовое к повторному использованию.

В модели восстановления SIMPLE, SQL Server усекает журнал транзакций при CHECKPOINT (см. SIMPLE recovery model - Initial stage.jpg, SIMPLE recovery model - Log truncation after CHECKPOINT.jpg).

Если репликация транзакций включена, VLF можно обрезать только после того, 
как обработчик транзакций репликации обработал транзакции из него.

Резервное копирование базы данных откладывает усечение журнала транзакций до тех пор, пока оно не будет завершено.

Модели восстановления FULL или BULK LOGGED поддерживает резервное копирование журналов транзакций, 
что позволяет вам восстановить базу данных и избежать потери данных независимо от состояния файлов данных, если журнал транзакций не поврежден.

В моделях восстановления FULL и BULK LOGGED SQL Server обрезает журнал транзакций во время резервного копирования журнала.

В моделях восстановления FULL и BULK LOGGED SQL Server требует, чтобы вы выполняли резервное копирование журнала транзакций, 
чтобы вызвать усечение журнала (см.  FULL and BULK LOGGED recovery models - Initial stage.jpg, FULL and BULK LOGGED recovery models - Log truncation.jpg).

Усечение может быть отложено, если у вас есть другие процессы, 
которым необходимо прочитать записи журнала транзакций (транзакционная репликации, зеркальное отображение базы данных и группы доступности AlwaysOn).

После создания базы данных в FULL или BULK LOGGED модели восстановления,
пока вы не запустите первую полную резервную копию, новая база данных, будет находится в простой модели восстановления.
Активные части журнала очищаются всякий раз, когда выдается контрольная точка базы данных,
а журнал транзакций остается достаточно стабильным, если только длительная транзакция не приводит к его росту.

Разница между моделями восстановления FULL и BULK LOGGED заключается в том, как SQL Server регистрирует минимально протокалируемые операции, 
такие как CREATE INDEX, ALTER INDEX REBUILD, BULK INSERT, INSERT INTO, INSERT SELECT и другие.

Модель восстановления SIMPLE регистрирует минимально протоколируемые операции аналогично модели восстановления BULK LOGGED.

Когда включена транзакционная репликация, операции BULK INSERT полностью регистрируются даже в рамках модели восстановления Bulk Logged.

TempDB всегда воссоздается при запуске SQL Server. 
Поэтому регистрация в TempDB не требует поддержки повторного этапа восстановления после сбоя. 
Записи журнала в TempDB хранят только старые значения из измененных строк данных, опуская новые значения.
    
Существует множество причин, по которым SQL Server не может урезать журнал транзакций. 
Вы можете просмотреть столбец log_reuse_wait_desc в представлении sys.databases, 
чтобы обнаружить причину, по которой журнал транзакций не может быть повторно использован.

Общим примером такой ситуации является недостижимый вторичный узел в группе доступности или сеансе зеркального отображения базы данных. 
Журнальные записи, которые не были отправлены вторичным пользователям, останутся частью активного журнала транзакций - это предотвращает его усечение.

Другим важным фактором является количество VLF в файлах журнала. 
Вам следует избегать ситуаций, когда журнал транзакций становится чрезмерно фрагментированным и имеет большое количество небольших VLF.
Точно так же вам следует избегать ситуаций, когда в журнале слишком мало, но очень большие VLF.

SQL Server всегда обнуляет журналы транзакций, даже если включена инициализация мгновенных файлов.
Все операции с базами данных, которые записываются в файл журнала, блокируются во время процесса автоматического роста.
Рекомендуется вручную управлять размером журнала транзакций, чтобы избежать автоматического роста журнала.

Необходимо проанализировать, как долго выполняется нулевая инициализация, 
и найти золотую середину, где допустимо время автоматического роста и размер генерируемых VLF (1ГБ для автоматического роста может работать во многих случаях).

Cоглашение об именах, резервных копий баз данных.
    Имя файла должно содержать имя сервера и экземпляра, имя базы данных, тип резервной копии (полный, дифференциальный или журнал транзакций), 
    а также дату и время резервного копирования. 
    
    Это значительно облегчает локализацию, управление и восстановление резервных копий.

    Например, ServerName_InstanceName_DatabaseName_BackupType_Date_Time.bak.
    
Независимо от типа резервного копирования, процесс всегда будет включать активную часть журнала транзакций, 
включая соответствующие LSN, что обеспечивает полную согласованность транзакций при восстановлении резервной копии.

В SQl Server Enterprise, для очень больших баз данных (Very Large Databases (VLDBs)), вы можете сделать резервные копии на уровне файлов и файловых групп, 
чтобы обеспечить более контролируемую процедуру при восстановлении.

Резервный буфер (backup buffer) представляет собой часть памяти за пределами буферного пула, достаточно большой, 
чтобы читать страницы из файла данных и записывать эти страницы в файл резервной копии.

Буфер резервного копирования обычно составляет от 16 до 32 МБ. 
Давление в памяти может уменьшить размеры резервного буфера и буфера восстановления,
что приведет к увеличению времени резервного копирования и восстановления.

Можно увеличить количество буферов резервного копирования (с использованием опции BUFFERCOUNT), 
а также размер передачи каждого блока на носитель резервного копирования (с использованием опции MAXTRANSFERSIZE) для повышения пропускной способности. 
Большое количество буферов может вызывать исключения из памяти.

ПОЛНЫЕ РЕЗЕРВНЫЕ КОПИИ.
    Полное резервное копирование базы данных представляет собой транзакционную копию всей базы данных (см. Backup\Full backup.sql).
    
    Этот тип резервного копирования включает в себя все страницы данных размером 8 КБ в файле базы данных, 
    а также часть журнала транзакций, которая была активной от начала до конца процесса резервного копирования.
    
    Когда полная резервная копия выполняется с настройками по умолчанию, зарезервированная страница данных, 
    известная как дифференциальная растровая карта (Differential Changed Map (DCM)), очищается.
    
    Вы можете изменить поведение по умолчанию, используя COPY_ONLY параметр, который не очищает дифференциальное растровое изображение. 
    Резервные копии только для копирования полезны для вывода внеплановой резервных копий, не влияя на расписание дифференциальной резервной копии.
    
РЕЗЕРВНЫЕ КОПИИ ЖУРНАЛОВ ТРАНЗАКЦИЙ.
    Резервные копии журналов транзакций представляют собой инкрементные резервные копии базы данных (см. Backup\Log backup.sql).
    
    В полной модели восстановления все транзакции полностью регистрируются. 
    Это означает, что вы можете вернуть базу данных в точное состояние, в котором был выполнен этот журнал транзакций, при условии успешного восстановления.

    В этом типе резервной копии активная часть журнала транзакций резервируется. 
    Резервные копии журналов транзакций применяются только к базам данных в моделях восстановления c полным или неполным протоколированием.
    
    Базы данных в полной модели восстановления могут быть восстановлены в определенный момент времени, 
    а базы данных в модели восстановления с неполным протоколированием могут быть восстановлены в определенный момент времени, 
    пока журнал транзакций не содержит операций с неполным протоколированием.
    
    Может произойти катастрофа, которая не влияет на сам журнал транзакций. 
    Например, диск или том для файла данных могут быть недоступны или повреждены, но SQL Server остается в сети.
    После того, как вы перевели базу данных, в однопользовательский режим, 
    вы можете выполнить резервное копирование активной части журнала транзакций вручную.
    
ДИФФЕРЕНЦИАЛЬНЫЕ РЕЗЕРВНЫЕ КОПИИ.    
    Дифференциальные резервные копии, основанные на полной резервной копии базы данных,
    являются удобной функцией для сокращения количества резервных копий журнала транзакций (и времени),
    необходимых для восстановления базы данных до момента времени.
    
    Во многих случаях дифференциальная резервная копия намного меньше полной резервной копии, 
    что позволяет использовать более гибкое расписание резервного копирования. 
    
    Вы можете выполнять полную резервную копию реже, а дифференциальные резервные копии выполняются более регулярно, 
    занимая меньше места, чем полная резервная копия.
    
    После завершения полной резервной копии дифференциальная растровая карта очищается. 
    Все последующие изменения в базе данных на уровне степени записываются в дифференциальном растровом изображении.
    
    Когда выполняется дифференциальное резервное копирование, 
    он обращается к дифференциальному растровому изображению и резервирует только экстенты, 
    которые были изменены с момента полной резервной копии, а также активную часть журнала транзакций.
    
    SQL Server 2017 предоставляет новый столбец, вызываемый modified_extent_page_count в DMV, 
    sys.dm_db_file_space_usage чтобы вы знали, насколько велика будет дифференциальная резервная копия. 
    
    Хорошим правилом является полная резервная копия, 
    если дифференциальное резервное копирование приближается к 80% от размера полной резервной копии.
    
КОНТРОЛЬНЫЕ СУММЫ РЕЗЕРВНОГО КОПИРОВАНИЯ
    SQL Server может выполнять дополнительные проверки контрольной суммы в резервных копиях баз данных. 
    По умолчанию резервные копии не выполняют контрольную сумму, если они не сжаты.

    Вы можете изменить это поведение либо с помощью флага трассировки (TF3023), либо в свойствах SQL Server Management Studio, 
    либо в любом сценарии T-SQL, который вы создаете для выполнения резервного копирования. 
    Рекомендуется по возможности включать контрольную сумму резервного копирования.
    
    Когда контрольная сумма резервного копирования включена, контрольная сумма вычисляется по всему файлу резервной копии. 
    Кроме того, будет проверена контрольная сумма страницы на каждой странице данных в 8 КБ 
    и контрольной суммы журнала из активной части журнала.
    
ПРОВЕРКА РЕЗЕРВНЫХ КОПИЙ.
    После создания резервной копии мы настоятельно рекомендуем немедленно убедиться, что резервная копия прошла успешно.
    
    Существует два способа проверить резервную копию:
        - Восстановить базу данных из резервной копии и выполнить полную проверку согласованности с помощью DBCC CHECKDB.
        - Более быстрый способ, использовать RESTORE VERIFYONLY.
          Если вы создали резервную копию своей базы данных, используя опцию контрольной суммы (которая включена по умолчанию при сжатых резервных копиях), 
          восстановление проверяет контрольную сумму резервного копирования, а также контрольные суммы страниц данных и блок лога при чтении через резервный носитель.
          
          Удобство RESTORE VERIFYONLY заключается в том, что вам не нужно выделять пространство на диске для восстановления данных и файлов журналов, 
          потому что восстановление будет считываться непосредственно из самой резервной копии.
          
    Тем не менее, a DBCC CHECKDB единственный способ узнать, что в базе данных нет коррупции.
    
    Несмотря на то, что контрольные суммы резервных копий проверены RESTORE VERIFYONLY, возможно, 
    что коррупция произошла после проверки страницы, когда она записывается на диск или когда она скопирована вне помещения. 
    Успешное RESTORE VERIFYONLY это не чистое резервное копирование для резервного копирования.
    